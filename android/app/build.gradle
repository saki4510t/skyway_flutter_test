def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
	localPropertiesFile.withReader('UTF-8') { reader ->
		localProperties.load(reader)
	}
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
	throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
	flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
	flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
	}

	lintOptions {
		disable 'InvalidPackage'
	}

	defaultConfig {
		minSdkVersion 21
		targetSdkVersion versionTarget

		versionCode flutterVersionCode.toInteger()
		versionName flutterVersionName

		// TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
		applicationId "com.serenegiant.skyway_flutter_test"
	}

	buildTypes {
		release {
			// TODO: Add your own signing config for the release build.
			// Signing with the debug keys for now, so `flutter run --release` works.
			signingConfig signingConfigs.debug
		}
	}
}

flutter {
	source '../..'
}

dependencies {
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

	implementation "androidx.appcompat:appcompat:${androidXVersion}"
	implementation "androidx.legacy:legacy-support-v4:${androidXLegacyV4}"

	implementation project(':skyway-sdk')
}
